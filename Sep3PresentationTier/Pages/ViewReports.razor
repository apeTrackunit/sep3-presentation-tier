@page "/Reports"
@using Services.Interfaces
@using Model
@using System.Net.Mime
@using System.Security.Claims
@using Model.DTOs
@using Services.Implementations
@inject IReportService ReportService
@inject NavigationManager navManager;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<h2 style="text-align: center">Reports overview</h2>

@if (role != null && role.Equals("User"))
{
    <MudContainer Class="d-flex align-items-end justify-end">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" OnClick="@(() => navManager.NavigateTo("/reports/new"))">New report</MudButton>    
    </MudContainer>
}

<MudGrid Class="report-list">
    @foreach (var report in reports)
    {
        <MudItem xs="12" sm="8" md="4">
            <MudCard Class="d-flex align-items-bottom justify-center mud-width-full py-8">
                <MudCardContent>
                    <MudText Typo="Typo.body1"> Latitude: @report.Location.latitude</MudText>
                    <MudText Typo="Typo.body1">Longtitude: @report.Location.longitude</MudText>
                    <MudText Typo="Typo.body1">Size: @report.Location.size </MudText>
                    <MudText Typo="Typo.body1"> Description: @report.Description</MudText>
                    <br>
                    <MudText Typo="Typo.body2">
                        Date: @report.Date[0].ToString("0000")-@report.Date[1].ToString("00")-@report.Date[2].ToString("00")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        Time: @report.Time[0].ToString("00"):@report.Time[1].ToString("00"):@report.Time[2].ToString("00")
                    </MudText>
                    <MudText Typo="Typo.body2"> Status @report.Status</MudText>
                    <br>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Success" OnClick='() => navManager.NavigateTo("/reports/detail/" + report.Id)'>Detail</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

    <div>@msg</div>
</MudGrid>

@code {

    private string msg = "";
    private ICollection<Report> reports = new List<Report>();
    
    public string? role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await loadData();
        
        string token = await localStorage.GetItemAsync<string>("JWT");
        IEnumerable<Claim> claims = AuthService.CreateClaimsPrincipal(token).Claims;
        role = claims.First(claim => claim.Type.Equals("role")).Value;
    }

    private async Task loadData()
    {
        try
        {
            var approved = false;
            reports = await ReportService.GetReportsAsync(approved);
        }
        catch (Exception ex)
        {
            msg = ex.Message;
        }
    }
}