@page "/Reports"
@using Services.Interfaces
@using Model
@using System.Security.Claims
@using Services.Implementations
@inject IReportService ReportService
@inject NavigationManager navManager;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<h2 style="text-align: center">Reports overview</h2>

@if (role != null && role.Equals("User"))
{
    <MudContainer Class="d-flex align-center justify-space-between m-0">
        <MudForm Class="d-flex align-center">
            <MudRadioGroup @bind-SelectedOption="@SelectedOption">
                <MudRadio Option="@("Approved")" Color="Color.Primary">Approved</MudRadio>
                <MudRadio Option="@("Submitted by me")" Color="Color.Secondary">Submitted by me</MudRadio>
            </MudRadioGroup>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" OnClick="@(async () => await loadData())">Search</MudButton>
        </MudForm>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" OnClick="@(() => navManager.NavigateTo("/reports/new"))">New report</MudButton>
    </MudContainer>
}

@if (loading)
{
    <MudText Align="Align.Center" Color="Color.Default">Loading...</MudText>
}
else
{
    @if (reports == null || reports.Count == 0)
    {
        <MudText Align="Align.Center" Color="Color.Default">No data</MudText>
        <MudText Align="Align.Center" Color="Color.Default">@msg</MudText>
    }
    else
    {
        <MudGrid Class="report-list">
            @foreach (var report in reports)
            {
                <MudItem xs="12" sm="8" md="4">
                    <MudCard Class="d-flex align-items-bottom justify-center mud-width-full py-8">
                        <MudCardContent>
                            <MudText Typo="Typo.body1"> Latitude: @report.Location.Latitude</MudText>
                            <MudText Typo="Typo.body1">Longtitude: @report.Location.Longitude</MudText>
                            <MudText Typo="Typo.body1">Size: @report.Location.Size </MudText>
                            <MudText Typo="Typo.body1"> Description: @report.Description</MudText>
                            <br>
                            <MudText Typo="Typo.body2">
                                Date: @report.Date[0].ToString("0000")-@report.Date[1].ToString("00")-@report.Date[2].ToString("00")
                            </MudText>
                            <MudText Typo="Typo.body2">
                                Time: @report.Time[0].ToString("00"):@report.Time[1].ToString("00"):@report.Time[2].ToString("00")
                            </MudText>
                            <MudText Typo="Typo.body2"> Status @report.Status</MudText>
                            <br>
                            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Success" OnClick='() => navManager.NavigateTo("/reports/detail/" + report.Id)'>Details</MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
}


@code {
    private bool loading = false;
    private string msg = "";
    private ICollection<Report> reports = new List<Report>();
    public string SelectedOption { get; set; }
    public string? role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SelectedOption = "Approved";
        string token = await localStorage.GetItemAsync<string>("JWT");
        IEnumerable<Claim> claims = AuthService.CreateClaimsPrincipal(token).Claims;
        role = claims.First(claim => claim.Type.Equals("role")).Value;

        await loadData();
    }

    private async Task loadData()
    {
        try
        {
            loading = true;
            reports = await ReportService.GetReportsAsync(SelectedOption.Equals("Approved"));
        }
        catch (Exception ex)
        {
            msg = ex.Message;
        }
        finally
        {
            loading = false;
        }

    }
}