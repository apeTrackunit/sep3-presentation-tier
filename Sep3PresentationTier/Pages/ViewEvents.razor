@page "/Events"
@using Model
@using Services.Implementations
@using System.Security.Claims
@using Model.DTOs
@using Services.Interfaces
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IEventService EventService
@inject NavigationManager navMgr;
<h2 style="text-align: center">Events overview</h2>

@if (role != null && role.Equals("User"))
{
    <MudContainer Class="d-flex align-center justify-space-between m-0">
        <MudForm Class="d-flex align-center">
            <MudSelect T="string" Label="Filter" ValueChanged="LoadData">
                <MudSelectItem Value="@("Upcoming")">Upcoming</MudSelectItem>
                <MudSelectItem Value="@("Organised by me")">Organised by me</MudSelectItem>
                <MudSelectItem Value="@("Attended by me")">Attended by me</MudSelectItem>
            </MudSelect>
        </MudForm>
    </MudContainer>
}

@if (loading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <div>@msg</div>
    <MudGrid Class="event-list">

        @foreach (var eventObj in events)
        {
            <MudItem md="4" sm="8" xs="12">
                <MudCard Class="d-flex align-items-bottom justify-center mud-width-full py-8">
                    <MudCardContent>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Filled.CalendarMonth" Size="Size.Small"></MudIcon>
                            @eventObj.Date[0].ToString("0000")-@eventObj.Date[1].ToString("00")-@eventObj.Date[2].ToString("00")
                        </MudText>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Filled.AccessTime" Size="Size.Small"></MudIcon>
                            @eventObj.Time[0].ToString("00"):@eventObj.Time[1].ToString("00")
                        </MudText>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Filled.Person"Size="Size.Small"></MudIcon>
                            @eventObj.Username
                        </MudText>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Filled.Info"></MudIcon>
                            @eventObj.Description
                        </MudText>
                        <MudText Typo="Typo.body1">
                            <table>
                                <tr>
                                    <td><MudIcon Icon="@Icons.Filled.LocationOn"></MudIcon></td>
                                    <td>
                                        <ul>
                                            <li>Latitude: @eventObj.Report.Location.Latitude</li>
                                            <li>Longtitude: @eventObj.Report.Location.Longitude</li>
                                            @{ string size = eventObj.Report.Location.Size == 3 ? "Large" : eventObj.Report.Location.Size == 2 ? "Medium" : "Small"; }
                                            <li>Size: @size</li>
                                        </ul>
                                    </td>
                                </tr>
                            </table>
                        </MudText>
                        <br/>
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Success" OnClick='() => navMgr.NavigateTo("/events/detail/" + eventObj.Id)'>Details</MudButton>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}


@code {
    private bool loading = false;
    private string msg = "";
    private ICollection<EventDto> events = new List<EventDto>();
    private IEnumerable<Claim> claims = new List<Claim>();
    public string? role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("JWT");
        claims = AuthService.CreateClaimsPrincipal(token).Claims;
        role = claims.First(claim => claim.Type.Equals("role")).Value;

        msg = "Select a filter";

        if (role.Equals("Admin"))
            await LoadData("");
    }

    private async Task LoadData(String filter)
    {
        msg = "";
        loading = true;
        try
        {
            events = await EventService.GetAsync(filter);
            Console.WriteLine(events);
        }
        catch (Exception e)
        {
            msg = e.Message;
        }
        loading = false;
    }

}