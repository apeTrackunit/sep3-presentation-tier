@page "/Events"
@using Model
@using Services.Implementations
@using System.Security.Claims
@using Services.Interfaces
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IEventService EventService
<h2 style="text-align: center">Events overview</h2>

@if (loading)
{
    <div>Loading events...</div>
}
<MudGrid Class="report-list">

    @foreach (var eventObj in events)
    {
        // string imageSrc = Convert.ToBase64String(eventObj.Report.Proof);
        // string imageDataURL = $"data:image/jpeg;base64, {imageSrc}";

        <MudItem xs="6">
            @* <MudCard Class="d-flex align-items-bottom justify-center mud-width-full py-8"> *@
            @*     <MudImage Src=@imageDataURL Alt="Image not found" Fluid="true" ObjectFit="ObjectFit.Contain"></MudImage> *@
            @* </MudCard> *@
            <MudCard Class="d-flex align-items-bottom justify-center mud-width-full py-8">
                <MudCardContent>
                    <MudText Typo="Typo.body2">
                        Date: @eventObj.Date[0].ToString("0000")-@eventObj.Date[1].ToString("00")-@eventObj.Date[2].ToString("00")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        Time: @eventObj.Time[0].ToString("00"):@eventObj.Time[1].ToString("00"):@eventObj.Time[2].ToString("00")
                    </MudText>
                    <br>
                    <MudText Typo="Typo.body1">Description: @eventObj.Description</MudText>
                    <br>
                    <MudText Typo="Typo.body1">Latitude: @eventObj.Report.Location.Latitude</MudText>
                    <MudText Typo="Typo.body1">Longtitude: @eventObj.Report.Location.Longitude</MudText>
                    <MudText Typo="Typo.body1">Size: @eventObj.Report.Location.Size </MudText>

                    @* <MudText Typo="Typo.body2"> Status @report.Status</MudText> *@
                    <br>
                    @*might be used later *@
                    @* @if (isAdmin) *@
                    @* { *@
                    @*     <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Success" OnClick="@(() => update(report.Id, "Approved"))">Approve</MudButton> *@
                    @*     <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Error" OnClick="@(() => update(report.Id, "Not Approved"))">Reject</MudButton> *@
                    @* } *@
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Success">View Event</MudButton>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Success">Attend Event</MudButton>


                </MudCardContent>
            </MudCard>
        </MudItem>
    }

    <div>@msg</div>
</MudGrid>

@code {
    private bool loading = false;
    private string msg = "";
    private ICollection<Event> events = new List<Event>();

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("JWT");
        IEnumerable<Claim> claims = AuthService.CreateClaimsPrincipal(token).Claims;
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            events = await EventService.GetAsync();
            Console.WriteLine(events);
        }
        catch (Exception e)
        {
            msg = e.Message;
        }
        loading = false;
    }

}