@using MudBlazor
@using MudBlazor.Extensions
@using System.Globalization
@using System.Security.Claims
@using Model
@using Services.Implementations
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager

<MudForm Class="page-content">
    <div class="d-flex flex-column overflow-scroll flex-wrap gap-8" style="height: calc(100vh - 200px)">
        <MudItem xs="10" sm="5" Class="flex-1">
            <MudPaper Class="pa-4 flex-1 card">
                <MudText Align="Align.Center" Color="Color.Default">Event Info</MudText>
                <MudDatePicker Label="Event Date" disabled="@(!ViewType.Equals("create"))" @bind-Date="@EventDate" Required="true" RequiredError="Required!"/>
                <MudTimePicker Label="Event Time" disabled="@(!ViewType.Equals("create"))" @bind-Time="@EventTime" Required="true" RequiredError="Required!"/>
                <MudTextField T="string" Label="Description" disabled="@(!ViewType.Equals("create"))" Required="true" RequiredError="Required!" Lines="4" @bind-Value="CleaningEvent.Description"></MudTextField>

                @if (!ViewType.Equals("create"))
                {
                    <MudText Align="Align.Center" Color="Color.Default">Image of the cleaned location</MudText>
                    if (CleaningEvent?.Validation != null)
                    {
                        var base64 = Convert.ToBase64String(CleaningEvent?.Validation);
                        var imgSrc = String.Format("data:{0};base64,{1}", "image/jpg", base64);
                        <img src="@imgSrc" style="width: 400px"/>
                    }
                    else
                    {
                        <div style="width: 400px; height: 400px; background-color: #6c757d;" Class="d-flex align-center justify-center">
                            <MudText Align="Align.Center" Style="color: #ffffff">No image</MudText>
                        </div>
                    }


                    <MudFileUpload Class="d-flex align-center justify-center" T="IBrowserFile" Accept=".jpg" Required="true" RequiredError="Required!" FilesChanged="UploadFile">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Filled.CloudUpload"
                                       for="@context">
                                Upload Files
                            </MudButton>
                        </ButtonTemplate>
                        <SelectedTemplate >
                            @if (context != null)
                            {
                                <MudText Align="Align.Center">@context.Name</MudText>
                            }
                        </SelectedTemplate>
                    </MudFileUpload>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="10" sm="5" Class="flex-1">
            <MudTable Items="@CleaningEvent.Attendees" Hover="true">
                <ToolBarContent>
                    <MudText Align="Align.Center" Color="Color.Default">Participants</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Username</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Username">@context.UserName</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudItem>
        <MudItem xs="10" sm="5" Class="flex-1">
            <MudPaper Class="pa-4 flex-1 card">
                <MudText Align="Align.Center" Color="Color.Default">Report Info</MudText>

                @if (CleaningEvent != null && CleaningEvent.Report.Location.Latitude > 0 && CleaningEvent.Report.Location.Longitude > 0)
                {
                    <iframe id="map" src=@mapUrl height="300" width="600"></iframe>
                }
                <MudTextField Disabled="true" T="double" Label="Latitude" Required="true" RequiredError="Required!" @bind-Value="CleaningEvent.Report.Location.Latitude"/>
                <MudTextField Disabled="true" T="double" Label="Longitude" Required="true" RequiredError="Required!" @bind-Value="CleaningEvent.Report.Location.Longitude"/>
                <MudSelect Disabled="true" T="int" Label="Size" Required="true" RequiredError="Required!" @bind-Value="CleaningEvent.Report.Location.Size" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@(1)">Small</MudSelectItem>
                    <MudSelectItem Value="@(2)">Medium</MudSelectItem>
                    <MudSelectItem Value="@(3)">Large</MudSelectItem>
                </MudSelect>
                <MudTextField Disabled="true" T="string" Label="Description" Required="true" RequiredError="Required!" Lines="4" @bind-Value="CleaningEvent.Report.Description"></MudTextField>

                @if (CleaningEvent.Report.Proof != null)
                {
                    var base64 = Convert.ToBase64String(CleaningEvent.Report.Proof);
                    var reportImg = String.Format("data:{0};base64,{1}", "image/jpg", base64);

                    <img src="@reportImg" style="width: 400px"/>
                }
                else
                {
                    <div style="width: 400px; height: 400px; background-color: #6c757d;" Class="d-flex align-center justify-center">
                        <MudText Align="Align.Center" Style="color: #ffffff">No image</MudText>
                    </div>
                }
            </MudPaper>
        </MudItem>
    </div>
    <MudItem>
        <div class="d-flex align-center justify-space-around mt-5">
            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Transparent" DisableElevation="true" OnClick="@(() => navManager.NavigateTo("/events"))">Back to events</MudButton>

            @if (Role != null && Role.Equals("User") && ViewType.Equals("create"))
            {
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateEvent">Create Event</MudButton>
            }
            @if (Role != null && Role.Equals("Admin") && ViewType.Equals("detail") && !CleaningEvent.Approved)
            {
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Success" OnClick="@(() => ApproveEvent.InvokeAsync(true))">Approve</MudButton>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Error" OnClick="@(() => ApproveEvent.InvokeAsync(false))">Reject</MudButton>
            }
        </div>
    </MudItem>
</MudForm>

@code {

    [Parameter]
    public string ViewType { get; set; }

    [Parameter]
    public Event? CleaningEvent { get; set; }

    [Parameter]
    public EventCallback<Event> CleaningEventChanged { get; set; }

    [Parameter]
    public EventCallback<Event> SaveEvent { get; set; }

    [Parameter]
    public EventCallback<bool> ApproveEvent { get; set; }


    ICollection<User> Attendees { get; set; }

    public DateTime? EventDate { get; set; }
    public TimeSpan? EventTime { get; set; }
    public string? Role { get; set; }
    public string? mapUrl;

    protected override void OnInitialized()
    {
        SetMap();
        if (CleaningEvent?.Date != null || CleaningEvent?.Time != null)
        {
            EventDate = new DateTime(CleaningEvent.Date[0], CleaningEvent.Date[1], CleaningEvent.Date[2]);
            EventTime = new TimeSpan(CleaningEvent.Time[0], CleaningEvent.Time[1], CleaningEvent.Time[2]);
        }
    }

    private async Task CreateEvent()
    {
        var tempDate = new[] { EventDate?.Year ?? 1999, EventDate?.Month ?? 1, EventDate?.Day ?? 1 };
        var tempTime = new[] { EventTime?.Hours ?? 1, EventTime?.Minutes ?? 1, EventTime?.Seconds ?? 1 };
        CleaningEvent.Date = tempDate;
        CleaningEvent.Time = tempTime;

        await SaveEvent.InvokeAsync(CleaningEvent);
    }

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("JWT");
        IEnumerable<Claim> claims = AuthService.CreateClaimsPrincipal(token).Claims;
        Role = claims.First(claim => claim.Type.Equals("role")).Value;
    }

    private void SetMap()
    {
        if (CleaningEvent != null && CleaningEvent.Report.Location.Latitude > 0 && CleaningEvent.Report.Location.Longitude > 0)
        {
            mapUrl = $"https://www.openstreetmap.org/export/embed.html?bbox={CleaningEvent.Report.Location.Longitude},{CleaningEvent.Report.Location.Latitude},{CleaningEvent.Report.Location.Longitude},{CleaningEvent.Report.Location.Latitude}&marker={CleaningEvent.Report.Location.Latitude},{CleaningEvent.Report.Location.Longitude}&layer=mapnik&zoom=13";
        }
    }

    private async void UploadFile(IBrowserFile file)
    {
        using (var ms = new MemoryStream())
        {
            await file.OpenReadStream(15 * 1000 * 1000).CopyToAsync(ms);
            CleaningEvent.Validation = ms.ToArray();
        }
    }
    
}