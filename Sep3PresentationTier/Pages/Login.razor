@page "/Login"
@using Services.Interfaces
@using Model
@inject IAuthService authService;
@inject NavigationManager navMgr;
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Security.AccessControl
@using Microsoft.AspNetCore.Components

<MudContainer Class="d-flex justify-center align-center">
    <MudPaper Elevation="1" Class="pa-4" Style="width: 30%">
        <MudContainer Class="d-flex flex-column justify-center gap-3">
            <MudText Align="Align.Center" Typo="Typo.h4" Style="text-underline: auto">@Title</MudText>
            <MudForm @ref="form" @bind-isValid="success" @bind-Errors="errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" @bind-Value="email"/>
                <MudTextField T="string" Label="Password" Required="true" @ref="pwField"
                              InputType="@PasswordInput"
                              RequiredError="Password is required!" @bind-Value="password" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="TogglePassword" AdornmentAriaLabel="Show Password"/>
            </MudForm>
            <MudContainer Class="d-flex flex-row-reverse justify-right gap-2">
                <MudButton  Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginOnClick">@ButtonText</MudButton>
            </MudContainer>
        </MudContainer>
    </MudPaper>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField;
    MudForm form;
    public string ButtonText { get; set; } = "Login";
    public string Title { get; set; } = "Welcome, please log in.";
    public string BackText { get; set; } = "Back";

    private string email = "";
    private string password = "";
    private string resultMsg = "";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }

        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void LoginOnClick()
    {
        Console.WriteLine("Logged IN:" + email + " " + password);
        LoginAsync();
    }
    
    private async Task LoginAsync()
    {
        resultMsg = "";

        try
        {
            await authService.LoginAsync(new UserLoginDto(email, password));
            email = "";
            password = "";
            resultMsg = "Logged in";
            navMgr.NavigateTo("/");
            Console.WriteLine(resultMsg + ": " + email);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

}

