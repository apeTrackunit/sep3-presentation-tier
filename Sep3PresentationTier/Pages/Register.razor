@page "/Register"
@using Services.Interfaces
@using Model.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAuthService authService;
@inject NavigationManager navManager;

<MudGrid Justify="Justify.Center" Class="align-center full-height">
    <MudItem xs="12" sm="7" Class="grid-items-center">
        <MudPaper Class="pa-4 auth-window-paper">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudText Align="Align.Center" GutterBottom="true" Color="Color.Dark" Class="title-font">Register</MudText>
                
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="email"/>
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="name"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="@PasswordInput"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" 
                              Required="true"
                              RequiredError="Password is required!" 
                              @bind-Value="password" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="@PasswordInputIcon" 
                              OnAdornmentClick="ShowPasswordClick" 
                              AdornmentAriaLabel="Show Password"/>
                <MudTextField T="string"
                              Label="Password" 
                              HelperText="Repeat the password" 
                              InputType="@PasswordRepInput" 
                              Required="true"
                              Validation="@(new Func<string, string>(PasswordMatch))"
                              Adornment="Adornment.End" 
                              AdornmentIcon="@PasswordRepInputIcon" 
                              OnAdornmentClick="ShowPasswordRepClick" 
                              AdornmentAriaLabel="Show Password"/>
                <div class="d-flex align-center justify-space-around mt-5">
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Transparent" DisableElevation="true" OnClick="@(() => navManager.NavigateTo("/login"))">Already have account?</MudButton>
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@RegisterIcon" Disabled="@(!success || loading)" Class="ml-auto" @onclick="CreateAsync">Register</MudButton>
                </div>
            </MudForm>
            @if (!string.IsNullOrWhiteSpace(msg))
            {
                <MudPaper>
                    <MudTextField T="string" @bind-Value="msg" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>
    @* If you want additional error messages on the side.
    @if (errors.Length > 0) *@
    @* { *@
    @*     <MudItem xs="12" sm="5"> *@
    @*         <MudPaper Class="pa-4 mud-height-full"> *@
    @* *@
    @*             <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText> *@
    @*             @foreach (var error in errors) *@
    @*             { *@
    @*                 <MudText Color="@Color.Error">@error</MudText> *@
    @*             } *@
    @* *@
    @*         </MudPaper> *@
    @*     </MudItem> *@
    @* } *@
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    bool loading;
    string RegisterIcon;
    
    private string email = "";
    private string password = "";
    private string name = "";
    private string msg = "";
    
    bool isPasswordShowed;
    bool isPasswordRepShowed;
    
    InputType PasswordInput = InputType.Password;
    InputType PasswordRepInput = InputType.Password;

    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;    
    string PasswordRepInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPasswordClick()
    {
        @if (isPasswordShowed)
        {
            isPasswordShowed = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isPasswordShowed = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    void ShowPasswordRepClick()
    {
        @if (isPasswordShowed)
        {
            isPasswordShowed = false;
            PasswordRepInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordRepInput = InputType.Password;
        }
        else {
            isPasswordShowed = true;
            PasswordRepInputIcon = Icons.Material.Filled.Visibility;
            PasswordRepInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
        if (!Regex.IsMatch(pw, @"\W|_"))
            yield return "Password must contain at least one non-alphanumeric character.";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task CreateAsync()
    {
        msg = "";
        try
        {
            RegisterIcon = Icons.Filled.Cached;
            loading = true;
            var token = await authService.RegisterAsync(new RegisterUserDto(name, email, password, "User"));
            
            await localStorage.SetItemAsync("JWT", token);

            navManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        finally
        {
            RegisterIcon = "";
            loading = false;
        }
    }

}